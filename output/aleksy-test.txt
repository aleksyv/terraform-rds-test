alex$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_security_group.allow_mysql_id will be read during apply
  # (config refers to values not yet known)
 <= data "aws_security_group" "allow_mysql_id"  {
      + arn         = (known after apply)
      + description = (known after apply)
      + id          = (known after apply)
      + name        = "allow_mysql"
      + tags        = (known after apply)
      + vpc_id      = (known after apply)
    }

  # aws_db_instance.mysql will be created
  + resource "aws_db_instance" "mysql" {
      + address                               = (known after apply)
      + allocated_storage                     = 10
      + apply_immediately                     = (known after apply)
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_name                               = "gartnersql"
      + db_subnet_group_name                  = "gartnersql-sg"
      + delete_automated_backups              = true
      + deletion_protection                   = false
      + endpoint                              = (known after apply)
      + engine                                = "mysql"
      + engine_version                        = "5.7"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = (known after apply)
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.micro"
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + maintenance_window                    = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + name                                  = (known after apply)
      + nchar_character_set_name              = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = (known after apply)
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = 3307
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_encrypted                     = true
      + storage_type                          = "gp2"
      + tags                                  = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
      + tags_all                              = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
      + timezone                              = (known after apply)
      + username                              = "admin"
      + vpc_security_group_ids                = (known after apply)
    }

  # aws_db_subnet_group.mysql will be created
  + resource "aws_db_subnet_group" "mysql" {
      + arn         = (known after apply)
      + description = "Managed by Terraform"
      + id          = (known after apply)
      + name        = "gartnersql-sg"
      + name_prefix = (known after apply)
      + subnet_ids  = [
          + "subnet-5146305f",
          + "subnet-f44383c5",
        ]
      + tags        = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
      + tags_all    = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
    }

  # aws_kms_key.rds will be created
  + resource "aws_kms_key" "rds" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = "RDS MySQL KMS key"
      + enable_key_rotation                = false
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags                               = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
      + tags_all                           = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
    }

  # aws_secretsmanager_secret.rds_credentials will be created
  + resource "aws_secretsmanager_secret" "rds_credentials" {
      + arn                            = (known after apply)
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + name                           = (known after apply)
      + name_prefix                    = (known after apply)
      + policy                         = (known after apply)
      + recovery_window_in_days        = 30
      + rotation_enabled               = (known after apply)
      + rotation_lambda_arn            = (known after apply)
      + tags_all                       = (known after apply)

      + replica {
          + kms_key_id         = (known after apply)
          + last_accessed_date = (known after apply)
          + region             = (known after apply)
          + status             = (known after apply)
          + status_message     = (known after apply)
        }

      + rotation_rules {
          + automatically_after_days = (known after apply)
        }
    }

  # aws_secretsmanager_secret_version.rds_credentials will be created
  + resource "aws_secretsmanager_secret_version" "rds_credentials" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + secret_id      = (known after apply)
      + secret_string  = (sensitive value)
      + version_id     = (known after apply)
      + version_stages = (known after apply)
    }

  # aws_security_group.allow_mysql will be created
  + resource "aws_security_group" "allow_mysql" {
      + arn                    = (known after apply)
      + description            = "Allow connection to MySQL"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Mysql from VPC"
              + from_port        = 3307
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3307
            },
        ]
      + name                   = "allow_mysql"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_mysql"
        }
      + tags_all               = {
          + "Name" = "allow_mysql"
        }
      + vpc_id                 = "vpc-1d834b60"
    }

  # random_id.suffix will be created
  + resource "random_id" "suffix" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 4
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # random_password.rds_password will be created
  + resource "random_password" "rds_password" {
      + id               = (known after apply)
      + length           = 16
      + lower            = true
      + min_lower        = 0
      + min_numeric      = 0
      + min_special      = 0
      + min_upper        = 0
      + number           = true
      + override_special = "_!%^"
      + result           = (sensitive value)
      + special          = true
      + upper            = true
    }

Plan: 8 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.


alex$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_security_group.allow_mysql_id will be read during apply
  # (config refers to values not yet known)
 <= data "aws_security_group" "allow_mysql_id"  {
      + arn         = (known after apply)
      + description = (known after apply)
      + id          = (known after apply)
      + name        = "allow_mysql"
      + tags        = (known after apply)
      + vpc_id      = (known after apply)
    }

  # aws_db_instance.mysql will be created
  + resource "aws_db_instance" "mysql" {
      + address                               = (known after apply)
      + allocated_storage                     = 10
      + apply_immediately                     = (known after apply)
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_name                               = "gartnersql"
      + db_subnet_group_name                  = "gartnersql-sg"
      + delete_automated_backups              = true
      + deletion_protection                   = false
      + endpoint                              = (known after apply)
      + engine                                = "mysql"
      + engine_version                        = "5.7"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = (known after apply)
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.micro"
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + maintenance_window                    = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + name                                  = (known after apply)
      + nchar_character_set_name              = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = (known after apply)
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = 3307
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_encrypted                     = true
      + storage_type                          = "gp2"
      + tags                                  = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
      + tags_all                              = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
      + timezone                              = (known after apply)
      + username                              = "admin"
      + vpc_security_group_ids                = (known after apply)
    }

  # aws_db_subnet_group.mysql will be created
  + resource "aws_db_subnet_group" "mysql" {
      + arn         = (known after apply)
      + description = "Managed by Terraform"
      + id          = (known after apply)
      + name        = "gartnersql-sg"
      + name_prefix = (known after apply)
      + subnet_ids  = [
          + "subnet-5146305f",
          + "subnet-f44383c5",
        ]
      + tags        = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
      + tags_all    = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
    }

  # aws_kms_key.rds will be created
  + resource "aws_kms_key" "rds" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 10
      + description                        = "RDS MySQL KMS key"
      + enable_key_rotation                = false
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags                               = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
      + tags_all                           = {
          + "environment" = "test"
          + "owner"       = "aleksy"
        }
    }

  # aws_secretsmanager_secret.rds_credentials will be created
  + resource "aws_secretsmanager_secret" "rds_credentials" {
      + arn                            = (known after apply)
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + name                           = (known after apply)
      + name_prefix                    = (known after apply)
      + policy                         = (known after apply)
      + recovery_window_in_days        = 30
      + rotation_enabled               = (known after apply)
      + rotation_lambda_arn            = (known after apply)
      + tags_all                       = (known after apply)

      + replica {
          + kms_key_id         = (known after apply)
          + last_accessed_date = (known after apply)
          + region             = (known after apply)
          + status             = (known after apply)
          + status_message     = (known after apply)
        }

      + rotation_rules {
          + automatically_after_days = (known after apply)
        }
    }

  # aws_secretsmanager_secret_version.rds_credentials will be created
  + resource "aws_secretsmanager_secret_version" "rds_credentials" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + secret_id      = (known after apply)
      + secret_string  = (sensitive value)
      + version_id     = (known after apply)
      + version_stages = (known after apply)
    }

  # aws_security_group.allow_mysql will be created
  + resource "aws_security_group" "allow_mysql" {
      + arn                    = (known after apply)
      + description            = "Allow connection to MySQL"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Mysql from VPC"
              + from_port        = 3307
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3307
            },
        ]
      + name                   = "allow_mysql"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_mysql"
        }
      + tags_all               = {
          + "Name" = "allow_mysql"
        }
      + vpc_id                 = "vpc-1d834b60"
    }

  # random_id.suffix will be created
  + resource "random_id" "suffix" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 4
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # random_password.rds_password will be created
  + resource "random_password" "rds_password" {
      + id               = (known after apply)
      + length           = 16
      + lower            = true
      + min_lower        = 0
      + min_numeric      = 0
      + min_special      = 0
      + min_upper        = 0
      + number           = true
      + override_special = "_!%^"
      + result           = (sensitive value)
      + special          = true
      + upper            = true
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_password.rds_password: Creating...
random_id.suffix: Creating...
random_id.suffix: Creation complete after 0s [id=L78EIg]
random_password.rds_password: Creation complete after 0s [id=none]
aws_kms_key.rds: Creating...
aws_db_subnet_group.mysql: Creating...
aws_secretsmanager_secret.rds_credentials: Creating...
aws_security_group.allow_mysql: Creating...
aws_secretsmanager_secret.rds_credentials: Creation complete after 1s [id=arn:aws:secretsmanager:us-east-1:426639961044:secret:rds_credentials-2fbf0422-kUlRga]
aws_db_subnet_group.mysql: Creation complete after 2s [id=gartnersql-sg]
aws_security_group.allow_mysql: Creation complete after 3s [id=sg-05c2bf5746c4eb542]
data.aws_security_group.allow_mysql_id: Reading...
data.aws_security_group.allow_mysql_id: Read complete after 0s [id=sg-05c2bf5746c4eb542]
aws_kms_key.rds: Creation complete after 5s [id=c618949b-e8f0-4f7a-b58e-b99bd6e0c372]
aws_db_instance.mysql: Creating...
aws_db_instance.mysql: Still creating... [10s elapsed]
aws_db_instance.mysql: Still creating... [20s elapsed]
aws_db_instance.mysql: Still creating... [30s elapsed]
aws_db_instance.mysql: Still creating... [40s elapsed]
aws_db_instance.mysql: Still creating... [50s elapsed]
aws_db_instance.mysql: Still creating... [1m0s elapsed]
aws_db_instance.mysql: Still creating... [1m10s elapsed]
aws_db_instance.mysql: Still creating... [1m20s elapsed]
aws_db_instance.mysql: Still creating... [1m30s elapsed]
aws_db_instance.mysql: Still creating... [1m40s elapsed]
aws_db_instance.mysql: Still creating... [1m50s elapsed]
aws_db_instance.mysql: Still creating... [2m0s elapsed]
aws_db_instance.mysql: Still creating... [2m10s elapsed]
aws_db_instance.mysql: Still creating... [2m20s elapsed]
aws_db_instance.mysql: Still creating... [2m30s elapsed]
aws_db_instance.mysql: Still creating... [2m40s elapsed]
aws_db_instance.mysql: Still creating... [2m50s elapsed]
aws_db_instance.mysql: Still creating... [3m0s elapsed]
aws_db_instance.mysql: Still creating... [3m10s elapsed]
aws_db_instance.mysql: Still creating... [3m20s elapsed]
aws_db_instance.mysql: Still creating... [3m30s elapsed]
aws_db_instance.mysql: Still creating... [3m40s elapsed]
aws_db_instance.mysql: Still creating... [3m50s elapsed]
aws_db_instance.mysql: Still creating... [4m0s elapsed]
aws_db_instance.mysql: Still creating... [4m10s elapsed]
aws_db_instance.mysql: Creation complete after 4m18s [id=terraform-20220518004038294800000001]
aws_secretsmanager_secret_version.rds_credentials: Creating...
aws_secretsmanager_secret_version.rds_credentials: Creation complete after 0s [id=arn:aws:secretsmanager:us-east-1:426639961044:secret:rds_credentials-2fbf0422-kUlRga|FAD430DA-CB30-477B-AC5C-0A75650DA8E8]

Apply complete! Resources: 8 added, 0 changed, 0 destroyed.



alex$ aws secretsmanager list-secrets
{
    "SecretList": [
        {
            "ARN": "arn:aws:secretsmanager:us-east-1:426639961044:secret:rds_credentials-2fbf0422-kUlRga",
            "Name": "rds_credentials-2fbf0422",
            "LastChangedDate": "2022-05-18T02:44:56.241000+02:00",
            "LastAccessedDate": "2022-05-18T02:00:00+02:00",
            "SecretVersionsToStages": {
                "FAD430DA-CB30-477B-AC5C-0A75650DA8E8": [
                    "AWSCURRENT"
                ]
            },
            "CreatedDate": "2022-05-18T02:40:33.185000+02:00"
        }
    ]
}
alex$ aws secretsmanager get-secret-value --secret-id rds_credentials-2fbf0422
{
    "ARN": "arn:aws:secretsmanager:us-east-1:426639961044:secret:rds_credentials-2fbf0422-kUlRga",
    "Name": "rds_credentials-2fbf0422",
    "VersionId": "FAD430DA-CB30-477B-AC5C-0A75650DA8E8",
    "SecretString": "{\n  \"username\": \"admin\",\n  \"password\": \"nlebctnAimpr1sW^\",\n  \"engine\": \"mysql\",\n  \"host\": \"terraform-20220518004038294800000001.cpleprvej9i9.us-east-1.rds.amazonaws.com:3307\",\n  \"port\": 3307\n}\n",
    "VersionStages": [
        "AWSCURRENT"
    ],
    "CreatedDate": "2022-05-18T02:44:56.237000+02:00"